--drop PROCEDURE DS.FILL_ACCOUNT_TURNOVER_F
/*
DO $$

declare 
my_date date := '01-01-2018'; 
begin

insert into logs.logs_ds
(etl_table, date_start, operation_status)
values ('DM_ACCOUNT_TURNOVER',clock_timestamp()::TIME,7);

for counter in 1..31 loop
call DS.FILL_ACCOUNT_TURNOVER_F(my_date);
raise notice '%' ,my_date;
my_date = my_date + INTERVAL '1 day';
end loop;
UPDATE logs.logs_ds 
SET
DATE_END = NOW()::TIME,
OPERATION_STATUS = 0,
TIME_ETL = clock_timestamp()::TIME - DATE_START
WHERE
OPERATION_STATUS = 7;

end $$ LANGUAGE PLPGSQL;





select * from  DM.DM_ACCOUNT_TURNOVER_F;


delete from DM.DM_ACCOUNT_TURNOVER_F;

*/
--drop PROCEDURE DS.FILL_ACCOUNT_TURNOVER_F
CREATE
OR REPLACE PROCEDURE DS.FILL_ACCOUNT_TURNOVER_F (ION_DATE DATE) AS $$
begin
CREATE table DM.VIEW1 AS
SELECT DISTINCT
	FT1."CREDIT_ACCOUNT_RK" AS ACCOUNT_RK
FROM
	DS.FT_POSTING_F AS FT1
WHERE
	FT1."OPER_DATE" = ION_DATE
UNION
SELECT DISTINCT
	FT2."DEBET_ACCOUNT_RK"
FROM
	DS.FT_POSTING_F AS FT2
WHERE
	FT2."OPER_DATE" = ion_date;

CREATE table DM.VIEW2 AS
SELECT
	V1.ACCOUNT_RK,
	SUM(FT."CREDIT_AMOUNT") AS CREDIT_AMOUNT
FROM
	DM.VIEW1 AS V1
	JOIN DS.FT_POSTING_F AS FT ON FT."CREDIT_ACCOUNT_RK" = V1.ACCOUNT_RK
WHERE
	FT."OPER_DATE" = ion_date
GROUP BY
	V1.ACCOUNT_RK;

CREATE table DM.VIEW3 AS
SELECT
	V2.ACCOUNT_RK,
	V2.CREDIT_AMOUNT,
	ACC."CURRENCY_RK" 
FROM
	DM.VIEW2 AS V2
	LEFT JOIN DS.MD_ACCOUNT_D AS ACC ON V2.ACCOUNT_RK = ACC."ACCOUNT_RK";

CREATE table DM.VIEW_CREDIT AS
SELECT DISTINCT
	V3.ACCOUNT_RK,
	V3.CREDIT_AMOUNT,
	COALESCE(
		CREDIT_AMOUNT * EXC."REDUCED_COURCE",
		CREDIT_AMOUNT * 1
	) AS CREDIT_AMOUNT_RUB
FROM
	DM.VIEW3 AS V3
	LEFT JOIN DS.MD_EXCHANGE_RATE_D AS EXC ON V3."CURRENCY_RK" = EXC."CURRENCY_RK"
	AND ion_date BETWEEN EXC."DATA_ACTUAL_DATE" AND EXC."DATA_ACTUAL_END_DATE";
	---------------debet-------
CREATE table DM.VIEW2_1 AS
SELECT
	V1.ACCOUNT_RK,
	SUM(FT."DEBET_AMOUNT") AS DEBET_AMOUNT
FROM
	DM.VIEW1 AS V1
	JOIN DS.FT_POSTING_F AS FT ON FT."DEBET_ACCOUNT_RK" = V1.ACCOUNT_RK
WHERE
	FT."OPER_DATE" = ion_date
GROUP BY
	V1.ACCOUNT_RK;

CREATE table DM.VIEW3_1 AS
SELECT
	V2.ACCOUNT_RK,
	V2.DEBET_AMOUNT,
	ACC."CURRENCY_RK"
FROM
	DM.VIEW2_1 AS V2
	LEFT JOIN DS.MD_ACCOUNT_D AS ACC ON V2.ACCOUNT_RK = ACC."ACCOUNT_RK";

CREATE table DM.VIEW_DEBET AS
SELECT DISTINCT
	V3.ACCOUNT_RK,
	V3.DEBET_AMOUNT,
	COALESCE(
		DEBET_AMOUNT * EXC."REDUCED_COURCE",
		DEBET_AMOUNT * 1
	) AS DEBET_AMOUNT_RUB
FROM
	DM.VIEW3_1 AS V3
	LEFT JOIN DS.MD_EXCHANGE_RATE_D AS EXC ON V3."CURRENCY_RK" = EXC."CURRENCY_RK"
	AND ion_date BETWEEN EXC."DATA_ACTUAL_DATE" AND EXC."DATA_ACTUAL_END_DATE";


--запись результата в нашу таблицу
create table dm.RESULTING as
SELECT
ion_date::date,
	COALESCE(CRD.ACCOUNT_RK, DBT.ACCOUNT_RK) AS ACCOUNT_RK ,
	CREDIT_AMOUNT,
	CREDIT_AMOUNT_RUB,
	DEBET_AMOUNT,
	DEBET_AMOUNT_RUB
FROM
	DM.VIEW_CREDIT AS CRD
	FULL JOIN DM.VIEW_DEBET AS DBT ON CRD.ACCOUNT_RK = DBT.ACCOUNT_RK;

insert into DM.DM_ACCOUNT_TURNOVER_F select * from dm.resulting;

	drop table dm.resulting;
	drop table dm.VIEW_DEBET;
	drop table dm.VIEW3_1;
	drop table dm.VIEW2_1;
	drop table dm.VIEW_CREDIT;
	drop table dm.VIEW3;
	drop table dm.VIEW2;
	drop table dm.VIEW1;
	end ;
	
 $$ LANGUAGE PLPGSQL;